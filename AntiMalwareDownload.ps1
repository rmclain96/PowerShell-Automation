<#  
.SYNOPSIS  
    Downloads the most recent versions of Anti-Malware and System Cleaning software
.DESCRIPTION  
    Downloads most up-to-date antivirus, antimalware, and system cleaning tools. By doing this,
    we are capable of storing an up-to-date repository of the installation EXEs
.NOTES  
    File Name  : AntiMalwareDownload.ps1  
    Author     : Ryan L. McLain - rmclain@ilstu.edu
    Date: 11/16/2021
#>

#Region Parameters

Param(
    #The download path for the download files
    [Parameter(Mandatory = $False)]
    [String] $DLPath = 'C:\TechZone',
    #MalwareBytes destination + Filename
    [Parameter(Mandatory = $False)]
    [String] $MBAMdestination = "$DLPath\mbam.exe",
    #Tron destination + Filename
    [Parameter(Mandatory = $False)]
    [String] $TronDestination = "$DLPath\tron.exe",
    #Repository where Tron is downloaded
    [Parameter(Mandatory = $False)]
    [String] $TronURL = "https://www.bmrf.org/repos/tron/",
    #Download link for MalwareBytes
    [Parameter(Mandatory = $False)]
    [String] $MBAMURL = "https://downloads.malwarebytes.com/file/mb-windows"
)

#Endregion Parameters

#Region Functions

Function GET-MBAM() {

    # Download the installer
    # Check if Invoke-Webrequest exists otherwise execute WebClient
    
    if (Get-Command 'Invoke-Webrequest') {
        Invoke-WebRequest $MBAMURL -OutFile $MBAMdestination
    }
    else {
        $WebClient = New-Object System.Net.WebClient
        $webclient.DownloadFile($MBAMURL, $MBAMdestination)
    }
    Write-Output "Placing MBAM.exe at directory: $DLPath\"
}

Function Get-Tron() {

    #Downloads the newest version of Tron found at bmrf.org.
    Write-Output "Downloading Most recent version in Repo: $TronURL$TronCURL"
    
    # Check if Invoke-Webrequest exists otherwise execute WebClient
    if (Get-Command 'Invoke-Webrequest') {
        Invoke-WebRequest -uri $TronURL$TronCURL -OutFile "$TronDestination"
    }
    else {
        $WebClient = New-Object System.Net.WebClient
        $webclient.DownloadFile($TronURL, $TronDestination)
    }

    Write-Output "Placing Tron.exe at directory: $DLPath\"
}

#endregion Functions

#Region Code Execution

#intial download folder creation
# Check if work directory exists for downloads to be placed in, if not create it
If (Test-Path -Path $DLPath -PathType Container) { 
    Write-Host "$DLPath already exists" -ForegroundColor Red 
} Else { 
    New-Item -Path $DLPath -ItemType directory 
}

#MalwareBytes Download
#Calls the Get-MBAM function to download malwarebytes
try {
    #Attempts to run the Get-MBAM function
    GET-MBAM
} Catch {
    #In the event of a failure writes out to the terminal to notify the user
    write:output "MalwareBytes download failed"
}

#Tron Download
#This sets $TRONCURL to the equivalent of running curl and grepping for "Tron.exe" I barely understand this portion but it works well
$TronCURL=(((Invoke-WebRequest -uri $TronURL).links.href | Sort-Object -Descending)[1])

#Calls the Get-Tron function to download malwarebytes
try {
    #Attempts to run the Get-Tron function
    Get-Tron
} Catch {
    #In the event of a failure writes out to the terminal to notify the user
    write:output "Tron download failed"
}


#endregion Code Execution

<#



#Setting Variables


#Invoke-WebRequest -Uri "https://www.ccleaner.com/ccleaner/download/standard" -OutFile "$DLPath\ccsetup.exe"

# Check if Invoke-Webrequest exists otherwise execute WebClient
if (Get-Command 'Invoke-Webrequest') {
    Invoke-WebRequest $MBAMDownload -OutFile $MBAMdestination
}
else {
    $WebClient = New-Object System.Net.WebClient
    $webclient.DownloadFile($MBAMDownload, $MBAMdestination)
}
#>